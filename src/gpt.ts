import { Configuration, OpenAIApi } from 'openai';
import { Config } from './config';

import { minify } from './minify';

import parseEnv from './dotenv'
import { Logger } from './logger';

/** @gpt */
export function initOpenAI() {
    return new OpenAIApi(new Configuration({
        apiKey: 
            process.env.OPENAI_API_KEY ||
            parseEnv('.env').OPENAI_API_KEY 
    }));;
}

/**
 * ES6 arrow functions will cause problms
 * this comment was manually generated
 */
export const GPT_DEBUG_COMMENT = (kind:string, id: string) => 
    `/**\n * DEBUG: Autogenerated placeholder for ${kind} "${id}" \n */`

/**
 * ES6 arrow functions will cause problms
 * this comment was manually generated
 */
/**
 * @param kind {string} The kind of the component (class, method, function, const) 
 * @param source {string} The definition source code of the function as a string
 * @param [config] {any} other options such as doc framework and language 
 * @returns 
 */
export const GPT_PROMPT = (config: Config, kind:string, source:string) => {  
    return `/* `+
    `Generate a ${config.framework} Doclet comment for the ${config.language} ${kind} below. `+
    `Descriptions must be accurate & clear. `+
    `Do not forget to add an @autogenerated tag at the begining of the comment. `+
    `${config.prompt} `+
    `*/${config.minify ? minify(source) : source}`;
}


/**
 * ES6 arrow functions will cause problms
 * this comment was manually generated
 */
/**
 * @param kind {string} The kind of the component (class, method, function, const) 
 * @param source {string} The definition source code of the function as a string
 * @returns The configuration for OpenAIApi
 */
export const GPT_COMPLETION_CONFIG = (config:Config, prompt:string) => ({
    model: config.openai.model || 'text-davinci-003',
    temperature: config.openai.temperature || 0.665,
    max_tokens: config.openai.max_tokens || 512,
    top_p: config.openai.top_p || 1,
    stop: ["*/"],
    prompt
});

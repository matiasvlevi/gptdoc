import fs from 'node:fs'
import { GptPromptComment, HeaderMatch } from './regex';

import { GPTDocument } from './GPTDocument';
import { Config } from '../config/types';

import path from 'node:path'
import { Project } from './Project';

/** @gpt */
export class File {
    /**
     * The text data from the File
     */
    source: string;

    /**
     * The full path of the file
     */
    fullpath: string;

    /**
     * All parsed GPTDocument comments
     */
    doclets: GPTDocument[];

    /**
     * The parent's project instance
     */
    project: Project;

    /**
     * Create a File instance
     * 
     * @param _project The project's instance
     * @param _source The source text for the file 
     * @param isPath Whether or not the file is constructed with a path, or with raw source code
     */
    constructor(_project: Project, _source: string, isPath: boolean = true) {
        
        this.project = _project;

        this.fullpath = _source;

        this.doclets = [];
        
        if (!isPath) {
            this.source = _source;
            return;
        } 
        
        this.source = fs.readFileSync(_source, 'utf-8');
    }

    static HEADER = (config: Config) => {
        if (config.disableHeader) return '';
        return `/**\n`+

        ` * Do not modify this file ! \n`+
        ` * This file is read & written by GPT-3\n`+
        ` * \n * ${config.DEBUG ? 
            'You are in DEBUG mode, Doclet generation is disabled\n * '+
            `To enable GPT completion, set the DEBUG variable to false in the config`
            :
            `Every Doclet with an @autogenerated tag is from GPT-3`
        }\n */\n\n`;
    }

    /** 
     * Get all GPTDocuments within this file
     */
    parseDocuments() {
        const doclets = this.source.matchAll(GptPromptComment);

        this.doclets = Array.from(doclets).map((doclet: RegExpMatchArray) => {
            return new GPTDocument(doclet, this.project.config.tab_size);
        })
    }

    /** 
     * Create a request for all GPTDocuments in the file
     * rewrite source value, as GPTDocuments get filled up
     */
    async gptDescribe() {
        for (let i = 0; i < this.doclets.length; i++) {
            this.source = 
                await this.doclets[i].gptDescribe(
                    this.source, this.project
                );
        }
    }

    /** 
     * Write a file and add a directory if needed
     */
    async writeDir(dest_path: string = this.fullpath) {
        let dir = path.dirname(dest_path);

        if (!fs.existsSync(dir)) 
            await fs.promises.mkdir(dir);

        return await this.writeFile(dest_path);
    }

    /** 
     * Write a single file, 
     * include a header if needed & if specified
     */
    async writeFile(path: string) {
        const content = (
            this.source.match(HeaderMatch) === null &&
            !this.project.config.disableHeader
        ) ? File.HEADER(this.project.config) : '';

        await fs.promises.writeFile(
            path,
            content + this.source,
            'utf-8'
        )
    }

}